perm_map = {"android.permission.CHANGE_WIFI_STATE":
['boolean reassociate()',
'boolean startScan()',
'void setCountryCode(java.lang.String,boolean)',
'int startUsingNetworkFeature(int,java.lang.String)',
'boolean disableNetwork(int)',
'int updateNetwork(android.net.wifi.WifiConfiguration)',
'boolean removeNetwork(int)',
'boolean reconnect()',
'int addNetwork(android.net.wifi.WifiConfiguration)',
'android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)',
'boolean enableNetwork(int,boolean)',
'boolean disconnect()',
'boolean setWifiEnabled(boolean)',
'void setNetworkPreference(int)',
'boolean saveConfiguration()',
'int stopUsingNetworkFeature(int,java.lang.String)',
'android.net.wifi.WifiManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.WifiManager$ChannelListener)'],

"android.permission.READ_PHONE_STATE":
['java.lang.String getSubscriberId()',
'java.lang.String getDeviceSoftwareVersion()',
'void listen(android.telephony.PhoneStateListener,int)',
'java.lang.String getLine1Number()',
'java.lang.String getSimSerialNumber()',
'int startUsingNetworkFeature(int,java.lang.String)',
'java.lang.String getVoiceMailAlphaTag()',
'java.lang.String getVoiceMailNumber()',
'java.lang.String getDeviceId()'],

"android.permission.WRITE_CONTACTS":
['void markAsContacted(android.content.ContentResolver,long)',
'void addPostalLocation(android.content.Context,long,double,double)',
'void assignContactFromPhone(java.lang.String,boolean)',
'byte[] get(android.content.ContentProviderClient,android.accounts.Account)',
'android.database.Cursor queryGroups(android.content.ContentResolver,long)',
'android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])',
'void set(android.content.ContentProviderClient,android.accounts.Account,byte[])',
'android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)',
'android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)',
'android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)',
'android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)',
'android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)',
'void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)',
'android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])',
'android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)',
'void markAsContacted(android.content.ContentResolver,long)',
'android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)',
'void onClick(android.view.View)',
'byte[] get(android.content.ContentProviderClient,android.accounts.Account)',
'void assignContactFromEmail(java.lang.String,boolean)',
'android.net.Uri getLookupUri(long,java.lang.String)',
'void set(android.content.ContentProviderClient,android.accounts.Account,byte[])',
'java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)',
'android.net.Uri addToGroup(android.content.ContentResolver,long,long)',
'void notifyDirectoryChange(android.content.ContentResolver)',
'android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)'],

"android.permission.GET_TASKS":
['java.util.List getRecentTasks(int,int)',
'java.util.List getRunningTasks(int)',
'java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)'],

"android.permission.CHANGE_WIFI_MULTICAST_STATE":
['void release()',
'void acquire()',
'void finalize()'],

"android.permission.NFC":
['byte[] transceive(byte[],boolean)',
'void writeBlock(int,byte[])',
'void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity[])',
'byte[] transceive(byte[],boolean)',
'void close()',
'void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])',
'byte[] transceive(byte[],boolean)',
'int getTimeout()',
'void connect()',
'byte[] transceive(byte[])',
'void close()',
'void connect()',
'void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])',
'void increment(int,int)',
'void close()',
'void setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback,android.app.Activity)',
'void close()',
'void reconnect()',
'void transfer(int)',
'void close()',
'boolean authenticateSectorWithKeyB(int,byte[])',
'void reconnect()',
'void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,android.app.Activity[])',
'void writePage(int,byte[])',
'int getTimeout()',
'byte[] transceive(byte[],boolean)',
'void reconnect()',
'void close()',
'android.nfc.NdefMessage getNdefMessage()',
'void setTimeout(int)',
'void restore(int)',
'byte[] transceive(byte[],boolean)',
'int getTimeout()',
'byte[] readBlock(int)',
'void reconnect()',
'void connect()',
'void close()',
'void setTimeout(int)',
'void disableForegroundDispatch(android.app.Activity)',
'void format(android.nfc.NdefMessage,boolean)',
'void reconnect()',
'int getTimeout()',
'void connect()',
'void formatReadOnly(android.nfc.NdefMessage)',
'void setBeamPushUris(android.net.Uri[],android.app.Activity)',
'boolean authenticate(int,byte[],boolean)',
'byte[] transceive(byte[],boolean)',
'void setTimeout(int)',
'void close()',
'byte[] transceive(byte[],boolean)',
'byte[] transceive(byte[])',
'void writeNdefMessage(android.nfc.NdefMessage)',
'int getTimeout()',
'byte[] transceive(byte[],boolean)',
'boolean makeReadOnly()',
'void reconnect()',
'void reconnect()',
'byte[] transceive(byte[])',
'void close()',
'void setTimeout(int)',
'void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)',
'void setTimeout(int)',
'void close()',
'void reconnect()',
'byte[] transceive(byte[])',
'byte[] readPages(int)',
'void connect()',
'void reconnect()',
'void connect()',
'void connect()',
'void decrement(int,int)',
'byte[] transceive(byte[])',
'byte[] transceive(byte[])',
'void reconnect()',
'void connect()',
'void connect()',
'boolean authenticateSectorWithKeyA(int,byte[])',
'void format(android.nfc.NdefMessage)',
'byte[] transceive(byte[],boolean)',
'byte[] transceive(byte[])',
'void connect()',
'void disableForegroundNdefPush(android.app.Activity)',
'byte[] transceive(byte[],boolean)'],

"android.permission.ACCESS_WIFI_STATE":
['java.util.List getScanResults()',
'android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)',
'android.net.DhcpInfo getDhcpInfo()',
'boolean pingSupplicant()',
'boolean isWifiEnabled()',
'int startUsingNetworkFeature(int,java.lang.String)',
'android.net.wifi.WifiInfo getConnectionInfo()',
'android.net.wifi.WifiManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.WifiManager$ChannelListener)',
'int getWifiState()',
'java.util.List getConfiguredNetworks()',
'void startAudio()'],

"android.permission.SEND_SMS":
['void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)',
'void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)',
'void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)',
'void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)',
'void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)',
'void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)'],

"android.permission.ACCESS_MOCK_LOCATION":
['void clearTestProviderLocation(java.lang.String)',
'void clearTestProviderEnabled(java.lang.String)',
'void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)',
'void setTestProviderLocation(java.lang.String,android.location.Location)',
'void removeTestProvider(java.lang.String)',
'void setTestProviderEnabled(java.lang.String,boolean)',
'void clearTestProviderStatus(java.lang.String)',
'void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)'],

"com.android.voicemail.permission.ADD_VOICEMAIL":
['java.lang.String getLastOutgoingCall(android.content.Context)',
'android.net.Uri buildSourceUri(java.lang.String)',
'android.net.Uri buildSourceUri(java.lang.String)'],

"android.permission.BLUETOOTH_ADMIN":
['void setMode(int)',
'boolean enable()',
'void startBluetoothSco()',
'boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)',
'boolean startDiscovery()',
'void dispatch(android.nfc.Tag)',
'int getPriority(android.bluetooth.BluetoothDevice)',
'int startUsingNetworkFeature(int,java.lang.String)',
'boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)',
'boolean setPriority(android.bluetooth.BluetoothDevice,int)',
'boolean disconnect(android.bluetooth.BluetoothDevice)',
'boolean disconnect(android.bluetooth.BluetoothDevice)',
'boolean setPriority(android.bluetooth.BluetoothDevice,int)',
'boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)',
'boolean connect(android.bluetooth.BluetoothDevice)',
'void stopBluetoothSco()',
'boolean setName(java.lang.String)',
'void setNetworkPreference(int)',
'boolean connect(android.bluetooth.BluetoothDevice)',
'int stopUsingNetworkFeature(int,java.lang.String)',
'boolean cancelDiscovery()',
'boolean disable()'],

"android.permission.VIBRATE":
['android.net.Uri getUriForDownloadedFile(long)',
'void notify(int,android.app.Notification)',
'void vibrate(long[],int)',
'void vibrate(long)',
'long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)',
'long enqueue(android.app.DownloadManager$Request)',
'void notify(java.lang.String,int,android.app.Notification)',
'void cancel()'],

"android.permission.MODIFY_AUDIO_SETTINGS":
['void setMode(int)',
'boolean onLongPress(android.inputmethodservice.Keyboard$Key)',
'void startBluetoothSco()',
'void setSpeakerphoneOn(boolean)',
'void setSpeakerMode(boolean)',
'void setBluetoothScoOn(boolean)',
'void setMicrophoneMute(boolean)',
'void setParameter(java.lang.String,java.lang.String)',
'boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)',
'void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)',
'boolean isWiredHeadsetOn()',
'void setKeyboard(android.inputmethodservice.Keyboard)',
'boolean onTouchEvent(android.view.MotionEvent)',
'boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)',
'boolean onHoverEvent(android.view.MotionEvent)',
'void stopBluetoothSco()',
'void setParameters(java.lang.String)',
'boolean isBluetoothA2dpOn()'],

"android.permission.RESTART_PACKAGES":
['void restartPackage(java.lang.String)',
'void killBackgroundProcesses(java.lang.String)'],

"android.permission.ACCESS_COARSE_LOCATION":
['void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)',
'java.util.List getProviders(android.location.Criteria,boolean)',
'void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)',
'android.location.LocationProvider getProvider(java.lang.String)',
'android.location.Location getLastKnownLocation(java.lang.String)',
'boolean isProviderEnabled(java.lang.String)',
'void addProximityAlert(double,double,float,long,android.app.PendingIntent)',
'void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)',
'java.lang.String getBestProvider(android.location.Criteria,boolean)',
'java.util.List getNeighboringCellInfo()',
'android.telephony.CellLocation getCellLocation()',
'void listen(android.telephony.PhoneStateListener,int)',
'java.util.List getProviders(boolean)',
'void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)',
'void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)',
'boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)',
'void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)',
'void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)',
'void requestSingleUpdate(java.lang.String,android.app.PendingIntent)',
'void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)'],

"android.permission.CHANGE_NETWORK_STATE":
['void setNetworkPreference(int)',
'boolean requestRouteToHost(int,int)',
'int stopUsingNetworkFeature(int,java.lang.String)',
'int startUsingNetworkFeature(int,java.lang.String)'],

"com.android.browser.permission.READ_HISTORY_BOOKMARKS":
['void deleteFromHistory(android.content.ContentResolver,java.lang.String)',
'void addSearchUrl(android.content.ContentResolver,java.lang.String)',
'android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)',
'boolean canClearHistory(android.content.ContentResolver)',
'void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)',
'java.lang.String[] getVisitedHistory(android.content.ContentResolver)',
'void truncateHistory(android.content.ContentResolver)',
'void clearSearches(android.content.ContentResolver)',
'void clearHistory(android.content.ContentResolver)',
'android.database.Cursor getAllBookmarks(android.content.ContentResolver)',
'void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)'],

"android.permission.READ_USER_DICTIONARY":
['void addWord(android.content.Context,java.lang.String,int,int)',
'void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)'],

"android.permission.WRITE_SETTINGS":
['void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)',
'android.net.Uri getUriFor(java.lang.String)',
'void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)',
'void setCountryCode(java.lang.String,boolean)',
'boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)',
'boolean putLong(android.content.ContentResolver,java.lang.String,long)',
'boolean putLong(android.content.ContentResolver,java.lang.String,long)',
'void dispatch(android.nfc.Tag)',
'boolean putInt(android.content.ContentResolver,java.lang.String,int)',
'void setEnabled(boolean)',
'boolean setPriority(android.bluetooth.BluetoothDevice,int)',
'boolean putFloat(android.content.ContentResolver,java.lang.String,float)',
'boolean putInt(android.content.ContentResolver,java.lang.String,int)',
'boolean setPriority(android.bluetooth.BluetoothDevice,int)',
'android.net.Uri getUriFor(java.lang.String)',
'boolean putFloat(android.content.ContentResolver,java.lang.String,float)',
'boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)',
'boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)',
'void setNetworkPreference(int)',
'void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)'],

"android.permission.READ_CALENDAR":
['android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)',
'android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)',
'android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])',
'android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)',
'android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])',
'android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])'],

"android.permission.CAMERA":
['void setVideoSource(int)',
'android.hardware.Camera open()'],

"android.permission.WRITE_USER_DICTIONARY":
['void addWord(android.content.Context,java.lang.String,int,int)',
'void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)'],

"android.permission.AUTHENTICATE_ACCOUNTS":
['void setUserData(android.accounts.Account,java.lang.String,java.lang.String)',
'void setPassword(android.accounts.Account,java.lang.String)',
'java.lang.String getPassword(android.accounts.Account)',
'boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)',
'java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)',
'java.lang.String getUserData(android.accounts.Account,java.lang.String)',
'void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)'],

"android.permission.INTERNET":
['void <init>(android.content.Context,android.net.nsd.INsdManager)',
'android.net.Uri getUriForDownloadedFile(long)',
'void bind(java.net.SocketAddress)',
'java.io.InputStream openStream()',
'void <init>(int)',
'void <init>(android.content.Context)',
'java.net.URLConnection openConnection()',
'void <init>(int)',
'void <init>(int)',
'java.lang.Object getContent()',
'void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)',
'java.io.InputStream getInputStream()',
'void <init>(int)',
'android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)',
'void <init>(android.content.Context,android.util.AttributeSet,int,boolean)',
'void <init>(int)',
'org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)',
'void <init>(int)',
'void <init>(android.content.Context,android.util.AttributeSet,int)',
'void init()',
'void <init>(int)',
'void <init>(android.content.Context,android.util.AttributeSet)',
'long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)',
'long enqueue(android.app.DownloadManager$Request)',
'void connect()',
'void connect()'],

"android.permission.SET_WALLPAPER":
['void setWallpaper(android.graphics.Bitmap)',
'void setBitmap(android.graphics.Bitmap)',
'void clearWallpaper()',
'void setStream(java.io.InputStream)',
'void clear()',
'void setWallpaper(android.graphics.Bitmap)',
'void setWallpaper(java.io.InputStream)',
'void clearWallpaper()',
'void setWallpaper(java.io.InputStream)',
'void setResource(int)'],

"com.android.browser.permission.WRITE_HISTORY_BOOKMARKS":
['void truncateHistory(android.content.ContentResolver)',
'void deleteFromHistory(android.content.ContentResolver,java.lang.String)',
'void addSearchUrl(android.content.ContentResolver,java.lang.String)',
'void clearHistory(android.content.ContentResolver)',
'void clearSearches(android.content.ContentResolver)',
'void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)',
'void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)'],

"android.permission.DISABLE_KEYGUARD":
['void reenableKeyguard()',
'void disableKeyguard()',
'void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)'],

"android.permission.WRITE_SOCIAL_STREAM":
['void markAsContacted(android.content.ContentResolver,long)',
'void addPostalLocation(android.content.Context,long,double,double)',
'android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])',
'void set(android.content.ContentProviderClient,android.accounts.Account,byte[])',
'android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)',
'android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)',
'android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)',
'android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)',
'void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)',
'android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])',
'android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)',
'void markAsContacted(android.content.ContentResolver,long)',
'android.net.Uri getLookupUri(long,java.lang.String)',
'void set(android.content.ContentProviderClient,android.accounts.Account,byte[])',
'android.net.Uri addToGroup(android.content.ContentResolver,long,long)',
'void notifyDirectoryChange(android.content.ContentResolver)',
'android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)'],

"android.permission.WRITE_EXTERNAL_STORAGE":
['android.net.Uri getUriForDownloadedFile(long)',
'long enqueue(android.app.DownloadManager$Request)',
'long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)'],

"android.permission.ACCESS_NETWORK_STATE":
['android.net.NetworkInfo getNetworkInfo(int)',
'boolean isActiveNetworkMetered()',
'int getNetworkPreference()',
'void setNetworkPreference(int)',
'android.net.NetworkInfo getActiveNetworkInfo()',
'android.net.NetworkInfo[] getAllNetworkInfo()',
'int stopUsingNetworkFeature(int,java.lang.String)',
'int startUsingNetworkFeature(int,java.lang.String)'],

"android.permission.REORDER_TASKS":
['void moveTaskToFront(int,int)',
'void moveTaskToFront(int,int,android.os.Bundle)'],

"android.permission.WRITE_CALENDAR":
['android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)'],

"android.permission.GET_ACCOUNTS":
['void deleteFromHistory(android.content.ContentResolver,java.lang.String)',
'android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)',
'void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)',
'android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'void truncateHistory(android.content.ContentResolver)',
'void clearSearches(android.content.ContentResolver)',
'android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)',
'void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)',
'void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)',
'void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)',
'void addSearchUrl(android.content.ContentResolver,java.lang.String)',
'android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.Account[] getAccountsByType(java.lang.String)',
'android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'void clearHistory(android.content.ContentResolver)',
'android.accounts.Account[] getAccounts()',
'android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)',
'java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)'],

"android.permission.READ_SYNC_STATS":
['boolean isSyncActive(android.accounts.Account,java.lang.String)',
'boolean isSyncActive(android.accounts.Account,java.lang.String)',
'boolean isSyncPending(android.accounts.Account,java.lang.String)',
'void syncProvider(android.net.Uri,java.lang.String,java.lang.String)',
'android.content.SyncInfo getCurrentSync()',
'java.util.List getCurrentSyncs()',
'android.content.SyncInfo getCurrentSync()',
'boolean isSyncPending(android.accounts.Account,java.lang.String)',
'java.util.List getCurrentSyncs()'],

"android.permission.ACCESS_FINE_LOCATION":
['void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)',
'java.util.List getProviders(android.location.Criteria,boolean)',
'void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)',
'android.location.LocationProvider getProvider(java.lang.String)',
'android.location.Location getLastKnownLocation(java.lang.String)',
'boolean isProviderEnabled(java.lang.String)',
'void addProximityAlert(double,double,float,long,android.app.PendingIntent)',
'void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)',
'java.lang.String getBestProvider(android.location.Criteria,boolean)',
'java.util.List getNeighboringCellInfo()',
'android.telephony.CellLocation getCellLocation()',
'java.util.List getProviders(boolean)',
'void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)',
'void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)',
'boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)',
'boolean addNmeaListener(android.location.GpsStatus$NmeaListener)',
'void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)',
'void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)',
'boolean addGpsStatusListener(android.location.GpsStatus$Listener)',
'void requestSingleUpdate(java.lang.String,android.app.PendingIntent)',
'void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)'],

"android.permission.USE_SIP":
['android.net.sip.SipSession getSessionFor(android.content.Intent)',
'android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)',
'void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)',
'android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)',
'void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)',
'boolean isOpened(java.lang.String)',
'boolean isRegistered(java.lang.String)',
'void open(android.net.sip.SipProfile)',
'void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)',
'android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)',
'void close(java.lang.String)',
'void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)',
'android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)'],

"android.permission.USE_CREDENTIALS":
['android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'void invalidateAuthToken(java.lang.String,java.lang.String)',
'java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)',
'void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)'],

"android.permission.SET_TIME_ZONE":
['void setTimeZone(java.lang.String)'],

"android.permission.WAKE_LOCK":
['boolean onKeyDown(int,android.view.KeyEvent)',
'void onError(int,java.lang.String)',
'void close()',
'void stop()',
'void resume()',
'void stopPreviousRingtone()',
'void finalize()',
'void setVideoURI(android.net.Uri,java.util.Map)',
'android.media.Ringtone getRingtone(int)',
'void close(java.lang.String)',
'void setUri(android.net.Uri)',
'void stop()',
'void finalize()',
'void play(android.content.Context,android.net.Uri,boolean,int)',
'void startAudio()',
'boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)',
'void release(int)',
'void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)',
'void release()',
'void setVideoPath(java.lang.String)',
'void stopPlayback()',
'void start()',
'boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)',
'void suspend()',
'void pause()',
'void release(boolean)',
'void stop()',
'void acquire(long)',
'android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)',
'void setWakeMode(android.content.Context,int)',
'void close(boolean)',
'void setStreamType(int)',
'void acquire()',
'void release()',
'void acquire()',
'void start()',
'void pause()',
'void setVideoURI(android.net.Uri)',
'void play()',
'void vibrate(long)',
'void reset()',
'android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)',
'void release()',
'void release()',
'void endCall()'],

"android.permission.READ_CONTACTS":
['void markAsContacted(android.content.ContentResolver,long)',
'void addPostalLocation(android.content.Context,long,double,double)',
'void assignContactFromPhone(java.lang.String,boolean)',
'byte[] get(android.content.ContentProviderClient,android.accounts.Account)',
'android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])',
'android.database.Cursor queryGroups(android.content.ContentResolver,long)',
'void set(android.content.ContentProviderClient,android.accounts.Account,byte[])',
'android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)',
'android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)',
'android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)',
'android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)',
'void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)',
'android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])',
'android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)',
'android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)',
'void markAsContacted(android.content.ContentResolver,long)',
'android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)',
'void onClick(android.view.View)',
'byte[] get(android.content.ContentProviderClient,android.accounts.Account)',
'void assignContactFromEmail(java.lang.String,boolean)',
'android.net.Uri getLookupUri(long,java.lang.String)',
'void set(android.content.ContentProviderClient,android.accounts.Account,byte[])',
'void notifyDirectoryChange(android.content.ContentResolver)',
'android.net.Uri addToGroup(android.content.ContentResolver,long,long)',
'java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)',
'android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)'],

"android.permission.SET_WALLPAPER_HINTS":
['void suggestDesiredDimensions(int,int)'],

"android.permission.READ_SYNC_SETTINGS":
['boolean getMasterSyncAutomatically()',
'java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)',
'void markAsContacted(android.content.ContentResolver,long)',
'void addPostalLocation(android.content.Context,long,double,double)',
'boolean getSyncAutomatically(android.accounts.Account,java.lang.String)',
'android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])',
'void set(android.content.ContentProviderClient,android.accounts.Account,byte[])',
'android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)',
'android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)',
'android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)',
'android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)',
'int getIsSyncable(android.accounts.Account,java.lang.String)',
'void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)',
'android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])',
'android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)',
'void markAsContacted(android.content.ContentResolver,long)',
'boolean getSyncAutomatically(android.accounts.Account,java.lang.String)',
'android.net.Uri getLookupUri(long,java.lang.String)',
'boolean getMasterSyncAutomatically()',
'void set(android.content.ContentProviderClient,android.accounts.Account,byte[])',
'void notifyDirectoryChange(android.content.ContentResolver)',
'android.net.Uri addToGroup(android.content.ContentResolver,long,long)',
'java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)',
'int getIsSyncable(android.accounts.Account,java.lang.String)',
'android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)'],

"android.permission.WRITE_SYNC_SETTINGS":
['void setIsSyncable(android.accounts.Account,java.lang.String,int)',
'void cancelSyncsandDisableAutoSync()',
'void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)',
'void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)',
'void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)',
'void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)',
'void setIsSyncable(android.accounts.Account,java.lang.String,int)',
'void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)',
'void setMasterSyncAutomatically(boolean)',
'void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)',
'void setMasterSyncAutomatically(boolean)'],

"android.permission.MANAGE_ACCOUNTS":
['android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)',
'void clearPassword(android.accounts.Account)',
'android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)',
'void invalidateAuthToken(java.lang.String,java.lang.String)',
'android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)',
'android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)',
'java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)',
'void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)'],

"android.permission.BROADCAST_STICKY":
['void setMode(int)',
'void removeStickyBroadcast(android.content.Intent)',
'void sendStickyBroadcast(android.content.Intent)',
'void startBluetoothSco()',
'void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)',
'void removeStickyBroadcast(android.content.Intent)',
'void stopBluetoothSco()',
'void sendStickyBroadcast(android.content.Intent)',
'void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)'],

"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS":
['boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)'],

"android.permission.READ_SOCIAL_STREAM":
['void markAsContacted(android.content.ContentResolver,long)',
'void addPostalLocation(android.content.Context,long,double,double)',
'void assignContactFromPhone(java.lang.String,boolean)',
'byte[] get(android.content.ContentProviderClient,android.accounts.Account)',
'android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])',
'android.database.Cursor queryGroups(android.content.ContentResolver,long)',
'void set(android.content.ContentProviderClient,android.accounts.Account,byte[])',
'android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)',
'android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)',
'android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)',
'android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)',
'void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)',
'android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)',
'android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])',
'android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)',
'void markAsContacted(android.content.ContentResolver,long)',
'android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)',
'void onClick(android.view.View)',
'byte[] get(android.content.ContentProviderClient,android.accounts.Account)',
'void assignContactFromEmail(java.lang.String,boolean)',
'android.net.Uri getLookupUri(long,java.lang.String)',
'void set(android.content.ContentProviderClient,android.accounts.Account,byte[])',
'android.net.Uri addToGroup(android.content.ContentResolver,long,long)',
'void notifyDirectoryChange(android.content.ContentResolver)',
'java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)',
'android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)'],

"android.permission.READ_CALL_LOG":
['java.lang.String getLastOutgoingCall(android.content.Context)'],

"android.permission.KILL_BACKGROUND_PROCESSES":
['void restartPackage(java.lang.String)',
'void killBackgroundProcesses(java.lang.String)'],

"android.permission.BLUETOOTH":
['int getProfileConnectionState(int)',
'java.lang.String getName()',
'java.util.List getDevicesMatchingConnectionStates(int[])',
'java.util.List getConnectedDevices()',
'void startBluetoothSco()',
'android.bluetooth.BluetoothClass getBluetoothClass()',
'int getConnectionState(android.bluetooth.BluetoothDevice)',
'void <init>(int,int,boolean,boolean,java.lang.String,int)',
'android.os.ParcelUuid[] getUuids()',
'boolean isAudioConnected(android.bluetooth.BluetoothDevice)',
'java.util.List getConnectedDevices()',
'boolean isEnabled()',
'boolean isEnabled()',
'int startUsingNetworkFeature(int,java.lang.String)',
'java.util.Set getBondedDevices()',
'boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)',
'boolean fetchUuidsWithSdp()',
'boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)',
'android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)',
'boolean disconnect(android.bluetooth.BluetoothDevice)',
'boolean setPriority(android.bluetooth.BluetoothDevice,int)',
'int getConnectionState()',
'boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)',
'boolean connect(android.bluetooth.BluetoothDevice)',
'boolean isDiscovering()',
'void setNetworkPreference(int)',
'boolean cancelDiscovery()',
'boolean isEnabled()',
'java.util.List getConnectedDevices()',
'java.lang.String getName()',
'void <init>(int,int,boolean,boolean,android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid)',
'java.util.List getDevicesMatchingConnectionStates(int[])',
'int getPriority(android.bluetooth.BluetoothDevice)',
'int getScanMode()',
'void setMode(int)',
'android.os.ParcelUuid[] getUuids()',
'boolean isEnabled()',
'boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)',
'java.util.List getDevicesMatchingConnectionStates(int[])',
'boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)',
'int getBondState()',
'android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)',
'boolean startDiscovery()',
'void dispatch(android.nfc.Tag)',
'java.lang.String getAddress()',
'int getPriority(android.bluetooth.BluetoothDevice)',
'int getConnectionState(android.bluetooth.BluetoothDevice)',
'android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)',
'boolean setPriority(android.bluetooth.BluetoothDevice,int)',
'void connect()',
'boolean disconnect(android.bluetooth.BluetoothDevice)',
'int getState()',
'int getConnectionState(android.bluetooth.BluetoothDevice)',
'void stopBluetoothSco()',
'void <init>(int,boolean,boolean,int)',
'boolean setName(java.lang.String)',
'android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)',
'android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)',
'boolean registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)',
'boolean connect(android.bluetooth.BluetoothDevice)',
'int stopUsingNetworkFeature(int,java.lang.String)',
'boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)'],

"android.permission.RECORD_AUDIO":
['void stopListening()',
'void setRecognitionListener(android.speech.RecognitionListener)',
'void cancel()',
'void <init>(int,int,int,int,int)',
'void startListening(android.content.Intent)',
'void setAudioSource(int)'],
}
